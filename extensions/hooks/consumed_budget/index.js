"use strict";var e=({filter:e,action:a},{services:t,getSchema:d})=>{const{ItemsService:c}=t;a("sp_qrcodes.items.update",(async(e,{schema:a,accountability:t})=>{const s=new c("sp_qrcodes",{schema:await d(),accountability:{admin:!0}}),u=new c("sp_lot_details",{schema:await d(),accountability:{admin:!0}}),n=new c("sp_campaigns",{schema:await d(),accountability:{admin:!0}});try{let a=await s.readByQuery({filter:{id:{_eq:parseInt(e.keys)}},fields:["*"]}),t=await u.readByQuery({filter:{id:{_eq:parseInt(a[0].lot)}},fields:["consumed_budget","consumed_qr_codes"]}),d=1,c=0;a[0].lot>0&&"redeemed"===e.payload.status?(c=t[0].consumed_budget+a[0].value,d=t[0].consumed_qr_codes+d,await u.updateOne(a[0].lot,{consumed_budget:c,consumed_qr_codes:d}),await n.updateOne(a[0].campaign,{consumed_budget:c,consumed_qr_codes:d})):a[0].lot>0&&("unredeemed"===e.payload.status||"returned"===e.payload.status)&&(t[0].consumed_budget>a[0].value?(c=t[0].consumed_budget-a[0].value,d=t[0].consumed_qr_codes-d):t[0].consumed_budget<a[0].value&&(c=a[0].value-t[0].consumed_budget,d-=t[0].consumed_qr_codes),await u.updateOne(a[0].lot,{consumed_budget:c,consumed_qr_codes:d}),await n.updateOne(a[0].campaign,{consumed_budget:c,consumed_qr_codes:d}))}catch(e){!async function(e){try{let a={};const t=new c("backend_logs",{schema:await d(),accountability:{admin:!0}});a.log=e,await t.createOne({log:a})}catch(e){}}(e)}}))};module.exports=e;
